//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PseudocodeRevisited {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExamplePrograms {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExamplePrograms() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PseudocodeRevisited.ExamplePrograms", typeof(ExamplePrograms).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///// recall that
        /////   30 div 7 = 4
        /////   30 mod 7 = 2
        ///
        ///NUM = 140  // code will print all factors of this number
        ///F = 1 
        ///FACTORS = 0
        ///
        ///loop until F*F &gt; NUM  //code will loop until F*F is greater than NUM
        ///  if NUM mod F = 0 then
        ///    D = NUM div F
        ///    output NUM , &quot; = &quot; , F , &quot;*&quot; , D
        ///    if F = 1 then
        ///      FACTORS = FACTORS + 0
        ///    else if F = D then
        ///      FACTORS = FACTORS + 1
        ///	else
        ///      FACTORS = FACTORS + 2
        ///    end if
        ///  end if
        ///  F = F + 1
        ///end loop
        ///output NUM , &quot; has &quot; , FACTORS , &quot; fact [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Factors {
            get {
                return ResourceManager.GetString("Factors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function partition(LIST, LO, HI)
        ///	PIVOT = LIST[(LO + HI) div 2]
        ///	I = LO - 1
        ///	J = HI + 1
        ///	loop while 1 = 1
        ///		I = I + 1
        ///		loop while LIST[I] &lt; PIVOT
        ///			I = I + 1
        ///		end loop
        ///		J = J - 1
        ///		loop while LIST[J] &gt; PIVOT
        ///			J = J - 1
        ///		end loop
        ///		if I &gt;= J then
        ///			return J
        ///		end if
        ///		SWAPTEMP = LIST[I]
        ///		LIST[I] = LIST[J]
        ///		LIST[J] = SWAPTEMP
        ///	end loop
        ///end function
        ///
        ///function quicksort(LIST, LO, HI)
        ///	if LO &lt; HI then
        ///		P = partition(LIST, LO, HI)
        ///		quicksort(LIST, LO, P)
        ///		quicksort(LIST, P + [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QuickSort {
            get {
                return ResourceManager.GetString("QuickSort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to prependText = join.
        /// </summary>
        internal static string TestProgram {
            get {
                return ResourceManager.GetString("TestProgram", resourceCulture);
            }
        }
    }
}
